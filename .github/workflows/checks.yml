name: Checks

on:
    push:
        branches: [main]

jobs:
    checks:
        runs-on: ubuntu-latest
        concurrency:
            group: checks-${{ github.ref }}
            cancel-in-progress: true
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - name: Install dependencies
              run: npm ci
            - name: Security audit (high+)
              run: |
                  set -e
                  npm audit --production --audit-level=high
            - name: Run Gitleaks secret scan
              uses: gitleaks/gitleaks-action@v2
              with:
                  args: detect --no-git -v
            - name: ESLint
              run: npm run lint
            - name: TypeScript typecheck
              run: npx tsc --noEmit
            - name: Run tests with coverage
              env:
                  FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
              run: npm run test:coverage
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  flags: unittests
                  fail_ci_if_error: true
            - name: Upload coverage artifact
              uses: actions/upload-artifact@v4
              with:
                  name: jest-coverage
                  path: coverage
            - name: Generate Job Summary
              uses: actions/github-script@v7
              with:
                  script: |
                      const fs = require('fs');
                      const path = require('path');

                      // Read coverage summary
                      let coverageSummary = 'N/A';
                      let coveragePercent = 'N/A';
                      let coverageStatus = '‚ùå';

                      try {
                          const coverageFile = 'coverage/coverage-summary.json';
                          if (fs.existsSync(coverageFile)) {
                              const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
                              const total = coverage.total;
                              coveragePercent = `${total.lines.pct}%`;
                              coverageStatus = total.lines.pct >= 95 ? '‚úÖ' : '‚ùå';
                              coverageSummary = `Lines: ${total.lines.pct}% | Functions: ${total.functions.pct}% | Branches: ${total.branches.pct}% | Statements: ${total.statements.pct}%`;
                          }
                      } catch (e) {
                          console.log('Could not read coverage summary:', e.message);
                      }

                      // Read test results
                      let testSummary = 'N/A';
                      let testStatus = '‚ùå';

                      try {
                          const testFile = 'coverage/test-results.json';
                          if (fs.existsSync(testFile)) {
                              const testResults = JSON.parse(fs.readFileSync(testFile, 'utf8'));
                              const { numTotalTests, numPassedTests, numFailedTests } = testResults;
                              testSummary = `${numPassedTests}/${numTotalTests} passed`;
                              testStatus = numFailedTests === 0 ? '‚úÖ' : '‚ùå';
                          }
                      } catch (e) {
                          // Fallback: try to parse from Jest output
                          testSummary = 'See logs for details';
                      }

                      // Get artifact URLs
                      const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          run_id: context.runId
                      });

                      const coverageArtifact = artifacts.data.artifacts.find(a => a.name === 'jest-coverage');
                      const coverageUrl = coverageArtifact ? 
                          `[Download Coverage Report](${coverageArtifact.archive_download_url})` : 
                          'Not available';

                      // Create summary
                      const summary = `# üîç Quality Checks Summary

                      ## Status Overview
                      | Check | Status | Details |
                      |-------|--------|---------|
                      | **Lint** | ‚úÖ | ESLint passed |
                      | **TypeCheck** | ‚úÖ | TypeScript compilation successful |
                      | **Tests** | ${testStatus} | ${testSummary} |
                      | **Coverage** | ${coverageStatus} | ${coverageSummary} |
                      | **Security Audit** | ‚úÖ | npm audit passed (high+ vulnerabilities) |
                      | **Secret Scan** | ‚úÖ | Gitleaks scan passed (no secrets found) |

                      ## Coverage Details
                      - **Threshold**: 95% (${coverageStatus === '‚úÖ' ? 'PASSED' : 'FAILED'})
                      - **Current**: ${coveragePercent}
                      - **Report**: ${coverageUrl}

                      ## Security Checks
                      - ‚úÖ **npm audit**: No high+ severity vulnerabilities found
                      - ‚úÖ **Gitleaks**: No secrets or credentials detected in codebase

                      ## Artifacts
                      - üìä **Coverage Report**: ${coverageUrl}

                      ---
                      *Generated by GitHub Actions*`;

                      await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: summary
                      }).catch(() => {
                          // If not a PR, just log the summary
                          console.log('Job Summary:', summary);
                      });

                      // Also set as job summary
                      core.summary
                          .addHeading('Quality Checks Summary')
                          .addTable([
                              [{data: 'Check', header: true}, {data: 'Status', header: true}, {data: 'Details', header: true}],
                              ['Lint', '‚úÖ', 'ESLint passed'],
                              ['TypeCheck', '‚úÖ', 'TypeScript compilation successful'],
                              ['Tests', testStatus, testSummary],
                              ['Coverage', coverageStatus, coverageSummary],
                              ['Security Audit', '‚úÖ', 'npm audit passed (high+ vulnerabilities)'],
                              ['Secret Scan', '‚úÖ', 'Gitleaks scan passed (no secrets found)']
                          ])
                          .addHeading('Coverage Details', 2)
                          .addRaw(`**Threshold**: 95% (${coverageStatus === '‚úÖ' ? 'PASSED' : 'FAILED'})`)
                          .addRaw(`**Current**: ${coveragePercent}`)
                          .addRaw(`**Report**: ${coverageUrl}`)
                          .addHeading('Security Checks', 2)
                          .addRaw(`‚úÖ **npm audit**: No high+ severity vulnerabilities found`)
                          .addRaw(`‚úÖ **Gitleaks**: No secrets or credentials detected in codebase`)
                          .addHeading('Artifacts', 2)
                          .addRaw(`üìä **Coverage Report**: ${coverageUrl}`)
                          .write();

                      // Optional: Email notification on failure (commented out)
                      /*
                      // Uncomment to enable email notifications on failure
                      if (context.job === 'checks' && context.payload.action === 'completed' && context.payload.workflow_run.conclusion === 'failure') {
                          const emailSummary = `# ‚ùå Quality Checks Failed
                          
                          ## Failed Checks
                          - Repository: ${context.repo.owner}/${context.repo.repo}
                          - Branch: ${context.payload.head_branch || 'main'}
                          - Workflow: ${context.workflow}
                          - Run ID: ${context.runId}
                          - Commit: ${context.sha}
                          
                          ## Next Steps
                          1. Check the [workflow logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                          2. Fix the failing checks
                          3. Push a new commit to retry
                          
                          ---
                          *This is an automated notification from GitHub Actions*`;
                          
                          // Add to job summary for visibility
                          core.summary
                              .addHeading('‚ùå Failure Notification', 1)
                              .addRaw(emailSummary)
                              .write();
                      }
                      */
