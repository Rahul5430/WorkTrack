name: CI

on:
    push:
        branches: [main]

jobs:
    lint-and-typecheck:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - run: npm ci
            - run: npm run lint
            - run: npx tsc --noEmit

    test:
        runs-on: ubuntu-latest
        needs: lint-and-typecheck
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - run: npm ci
            - name: Run full test suite with coverage
              env:
                  FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
              run: npm run test:coverage
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  flags: unittests
                  fail_ci_if_error: true
            - name: Upload coverage artifact
              uses: actions/upload-artifact@v4
              with:
                  name: jest-coverage
                  path: coverage

    build-android:
        runs-on: macos-15
        needs: test
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - name: Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '17'
            - name: Setup Android SDK
              uses: android-actions/setup-android@v3
            - run: npm ci
            - name: Android build (APK)
              run: |
                  cd android
                  echo "Gradle version:"
                  ./gradlew --version
                  echo "Building APK..."
                  ./gradlew assembleDebug --info
            - name: List APK files
              run: |
                  echo "Checking for APK files..."
                  find android/app/build/outputs -name "*.apk" -type f
                  ls -la android/app/build/outputs/apk/debug/ || echo "Debug directory not found"
                  ls -la android/app/build/outputs/ || echo "Outputs directory not found"
            - name: Upload Android APK
              uses: actions/upload-artifact@v4
              with:
                  name: android-apk-debug
                  path: android/app/build/outputs/apk/debug/*.apk
                  if-no-files-found: error

    build-ios:
        runs-on: macos-15
        needs: test
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - name: Setup Xcode
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: '16.1'
            - run: npm ci
            - name: Install Ruby gems (cocoapods)
              run: |
                  gem install cocoapods --no-document
            - name: Install iOS pods
              working-directory: ios
              run: |
                  xcodebuild -version
                  pod --version
                  pod install --no-repo-update
            - name: List available simulators
              run: |
                  xcrun simctl list devices available
            - name: iOS build (Simulator)
              run: |
                  # Find available iOS simulators
                  SIMULATOR_DEVICE=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')

                  if [ -z "$SIMULATOR_DEVICE" ]; then
                      echo "No iPhone simulators found, trying generic iOS Simulator"
                      SIMULATOR_DEVICE=$(xcrun simctl list devices available | grep "iOS Simulator" | head -1 | sed 's/.*(\([^)]*\)).*/\1/')
                  fi

                  if [ -z "$SIMULATOR_DEVICE" ]; then
                      echo "No simulators found, building without specific destination"
                      xcodebuild \
                        -workspace ios/WorkTrack.xcworkspace \
                        -scheme WorkTrack \
                        -configuration Release \
                        -sdk iphonesimulator \
                        -derivedDataPath ios/build \
                        CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
                        clean build
                  else
                      echo "Using simulator: $SIMULATOR_DEVICE"
                      xcodebuild \
                        -workspace ios/WorkTrack.xcworkspace \
                        -scheme WorkTrack \
                        -configuration Release \
                        -sdk iphonesimulator \
                        -destination "platform=iOS Simulator,id=$SIMULATOR_DEVICE" \
                        -derivedDataPath ios/build \
                        CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
                        clean build
                  fi

                  mkdir -p ios/build/simulator
                  cp -r ios/build/Build/Products/Release-iphonesimulator/WorkTrack.app ios/build/simulator/
            - name: Upload iOS Simulator App
              uses: actions/upload-artifact@v4
              with:
                  name: ios-simulator-app
                  path: ios/build/simulator/WorkTrack.app

    build-summary:
        runs-on: ubuntu-latest
        needs: [build-android, build-ios]
        if: always()
        steps:
            - name: Build Summary
              run: |
                  echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
                  echo "| Platform | Status | Artifact |" >> $GITHUB_STEP_SUMMARY
                  echo "|----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
                  echo "| Android | ${{ needs.build-android.result }} | APK (Debug) |" >> $GITHUB_STEP_SUMMARY
                  echo "| iOS | ${{ needs.build-ios.result }} | Simulator App |" >> $GITHUB_STEP_SUMMARY

    security:
        runs-on: ubuntu-latest
        needs: lint-and-typecheck
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - run: npm ci --omit=dev --ignore-scripts
            - name: Run npm audit
              run: |
                  set -e
                  # Fail only on vulnerabilities above moderate (i.e., high/critical)
                  npm audit --production --audit-level=high
