name: iOS Build

on:
    workflow_run:
        workflows: ['Checks']
        types: [completed]

jobs:
    build-ios:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: macos-15
        concurrency:
            group: ios-${{ github.event.workflow_run.head_branch || github.ref }}
            cancel-in-progress: true
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'
            - name: Setup Xcode 16.1
              uses: maxim-lobanov/setup-xcode@v1
              with:
                  xcode-version: '16.1'
            - name: Install Node dependencies
              run: npm ci
            - name: Install CocoaPods
              run: |
                  gem install cocoapods --no-document
            - name: Install iOS pods
              working-directory: ios
              run: |
                  xcodebuild -version
                  pod --version
                  pod install --no-repo-update
            - name: List available simulators
              run: |
                  xcrun simctl list devices available
            - name: Build iOS app (Simulator)
              run: |
                  echo "Selecting best available iPhone simulator matching installed SDK..."
                  echo "Dumping available devices JSON for debugging:"
                  if command -v jq >/dev/null 2>&1; then
                    xcrun simctl list --json devices available | jq '.'
                  else
                    xcrun simctl list --json devices available
                  fi
                  SDK_VER=$(xcrun --sdk iphonesimulator --show-sdk-version 2>/dev/null || true)
                  if [ -z "$SDK_VER" ]; then
                    SDK_VER=$(xcodebuild -version -sdk iphonesimulator 2>/dev/null | awk '/SDKVersion/ {print $2; exit}')
                  fi
                  echo "Detected iphonesimulator SDK version: ${SDK_VER:-unknown}"
                  SDK_VER_DASH=${SDK_VER//./-}
                  # Prefer jq-powered JSON selection; fall back to grep if jq unavailable
                  if command -v jq >/dev/null 2>&1 && [ -n "$SDK_VER_DASH" ]; then
                    SIMULATOR_DEVICE=$(xcrun simctl list --json devices available | jq -er --arg ver "iOS-${SDK_VER_DASH}" '
                      .devices
                      | to_entries
                      | map(select(.key | startswith($ver)))
                      | map(. as $e | $e.value[]
                          | {udid, name: (.name // ""), runtime: $e.key})
                      | map(select(.name | startswith("iPhone")))
                      | map(.modelWeight = (if (.name | contains("Pro Max")) then 5
                                           elif (.name | contains("Pro")) then 4
                                           elif (.name | contains("Plus")) then 3
                                           elif (.name | contains("SE")) then 1
                                           else 2 end))
                      | sort_by(.modelWeight)
                      | last
                      | .udid
                    ' 2>/dev/null || true)
                  else
                    echo "jq not available or SDK version unknown; falling back to grep-based selection within iOS ${SDK_VER} section"
                    if [ -n "$SDK_VER" ]; then
                      # Extract lines under the specific iOS version section and pick preferred models
                      SECTION=$(xcrun simctl list devices available | awk "/-- iOS ${SDK_VER} --/{flag=1;next}/-- iOS/{flag=0}flag")
                      CANDIDATE=$(printf "%s\n" "$SECTION" | grep "iPhone 16 Pro Max\|iPhone 16 Pro\|iPhone 16 Plus\|iPhone 16\|iPhone SE" | head -1)
                      SIMULATOR_DEVICE=$(printf "%s" "$CANDIDATE" | sed -n 's/.* (\([0-9A-Fa-f-]\{36\}\)) .*/\1/p')
                    fi
                    if [ -z "$SIMULATOR_DEVICE" ]; then
                      # Final fallback: first available iPhone of any version
                      SIMULATOR_DEVICE=$(xcrun simctl list devices available | grep "^    iPhone" | sed -n 's/.* (\([0-9A-Fa-f-]\{36\}\)) .*/\1/p' | head -1)
                    fi
                  fi

                  if [ -z "$SIMULATOR_DEVICE" ]; then
                      echo "No iPhone simulators found, trying generic iOS Simulator"
                      SIMULATOR_DEVICE=$(xcrun simctl list devices available | sed -n 's/.* (\([0-9A-Fa-f-]\{36\}\)) .*/\1/p' | head -1)
                  fi

                  if [ -z "$SIMULATOR_DEVICE" ]; then
                      echo "No simulators found, building without specific destination"
                      xcodebuild \
                        -workspace ios/WorkTrack.xcworkspace \
                        -scheme WorkTrack \
                        -configuration Release \
                        -sdk iphonesimulator \
                        -derivedDataPath ios/build \
                        CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
                        clean build
                  else
                      echo "Using simulator UDID: $SIMULATOR_DEVICE"
                      xcodebuild \
                        -workspace ios/WorkTrack.xcworkspace \
                        -scheme WorkTrack \
                        -configuration Release \
                        -sdk iphonesimulator \
                        -destination "platform=iOS Simulator,id=$SIMULATOR_DEVICE" \
                        -derivedDataPath ios/build \
                        CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
                        clean build
                  fi

                  mkdir -p ios/build/simulator
                  cp -r ios/build/Build/Products/Release-iphonesimulator/WorkTrack.app ios/build/simulator/
            - name: Upload iOS simulator app
              uses: actions/upload-artifact@v4
              with:
                  name: ios-simulator-app
                  path: ios/build/simulator/WorkTrack.app
